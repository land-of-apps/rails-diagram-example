[
  {
    "caller": "GET /",
    "callee": "actionpack/ActionController"
  },
  {
    "caller": "GET /",
    "callee": "actionpack/ActionDispatch"
  },
  {
    "caller": "GET /",
    "callee": "actionview/ActionView"
  },
  {
    "caller": "GET /",
    "callee": "activesupport/ActiveSupport"
  },
  {
    "caller": "GET /",
    "callee": "app/controllers"
  },
  {
    "caller": "GET /",
    "callee": "json/JSON"
  },
  {
    "caller": "GET /",
    "callee": "logger/Logger"
  },
  {
    "caller": "GET /",
    "callee": "ruby/String"
  },
  {
    "caller": "actionpack/ActionController",
    "callee": "app/views"
  },
  {
    "caller": "actionpack/ActionDispatch",
    "callee": "activesupport/ActiveSupport"
  },
  {
    "caller": "actionpack/ActionDispatch",
    "callee": "json/JSON"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "json/JSON"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "openssl/OpenSSL"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "psych/Psych"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "ruby/Array"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "ruby/ERB"
  },
  {
    "caller": "activesupport/ActiveSupport",
    "callee": "ruby/String"
  },
  {
    "caller": "app/controllers",
    "callee": "app/helpers"
  },
  {
    "caller": "app/controllers",
    "callee": "app/models"
  },
  {
    "caller": "app/helpers",
    "callee": "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = ? LIMIT ?"
  },
  {
    "caller": "app/helpers",
    "callee": "actionpack/ActionDispatch"
  },
  {
    "caller": "app/helpers",
    "callee": "activesupport/ActiveSupport"
  },
  {
    "caller": "app/helpers",
    "callee": "app/models"
  },
  {
    "caller": "app/helpers",
    "callee": "logger/Logger"
  },
  {
    "caller": "app/views",
    "callee": "SELECT COUNT(*) FROM \"microposts\" WHERE (user_id IN (SELECT followed_id FROM relationships\n                     WHERE  follower_id = 1)\n                     OR user_id = 1)"
  },
  {
    "caller": "app/views",
    "callee": "SELECT COUNT(*) FROM \"microposts\" WHERE \"microposts\".\"user_id\" = ?"
  },
  {
    "caller": "app/views",
    "callee": "SELECT COUNT(*) FROM \"users\" INNER JOIN \"relationships\" ON \"users\".\"id\" = \"relationships\".\"followed_id\" WHERE \"relationships\".\"follower_id\" = ?"
  },
  {
    "caller": "app/views",
    "callee": "SELECT COUNT(*) FROM \"users\" INNER JOIN \"relationships\" ON \"users\".\"id\" = \"relationships\".\"follower_id\" WHERE \"relationships\".\"followed_id\" = ?"
  },
  {
    "caller": "app/views",
    "callee": "SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_type\" = ? AND \"active_storage_attachments\".\"name\" = ? AND \"active_storage_attachments\".\"record_id\" IN (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
  },
  {
    "caller": "app/views",
    "callee": "SELECT \"microposts\".* FROM \"microposts\" WHERE (user_id IN (SELECT followed_id FROM relationships\n                     WHERE  follower_id = 1)\n                     OR user_id = 1) ORDER BY \"microposts\".\"created_at\" DESC LIMIT ? OFFSET ?"
  },
  {
    "caller": "app/views",
    "callee": "SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" IN (?, ?, ?, ?, ?)"
  },
  {
    "caller": "app/views",
    "callee": "actionpack/ActionDispatch"
  },
  {
    "caller": "app/views",
    "callee": "actionview/ActionView"
  },
  {
    "caller": "app/views",
    "callee": "activesupport/ActiveSupport"
  },
  {
    "caller": "app/views",
    "callee": "app/helpers"
  },
  {
    "caller": "app/views",
    "callee": "logger/Logger"
  },
  {
    "caller": "app/views",
    "callee": "ruby/Array"
  },
  {
    "caller": "app/views",
    "callee": "ruby/Marshal"
  },
  {
    "caller": "app/views",
    "callee": "ruby/String"
  },
  {
    "caller": "app/views",
    "callee": "sprockets/Sprockets"
  },
  {
    "caller": "ruby/ERB",
    "callee": "ruby/Kernel"
  },
  {
    "caller": "sprockets/Sprockets",
    "callee": "ruby/Marshal"
  }
]